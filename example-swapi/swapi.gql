# This header declares the `from` and `rest` directives that GraphqlRest
# implements

directive @from(
   prop: String!
)

directive @rest(
   url: String!
   method: String = "GET"
   prefix: Boolean = true
)

# Passing { addHeader: true } allows to omit the header, but is not
# recommended if you are going to use any GraphQL linting tool, as the
# GraphQL specification requires declaring the directives you use.
# ---

# ---
# Using @from(get) allows you to specify the URL and REST method to use for the
# resolver. Any word preceded by `:` will undergo substitution
# A word is /[A-Za-z_]+/
type Query {
   film(
      id: ID
   ): Film @rest(url: "/films/(id)")
   films: FilmResult @rest(url: "/films")
   person(
      id: ID
   ): Person @rest(url: "/people/(id)")
   people: PersonResult @rest(url: "/people")
   planet(
      id: ID
   ): Planet @rest(url: "/planets/(id)")
   planets: PlanetResult @rest(url: "/planets")
   specy(
      id: ID
   ): Specy @rest(url: "/species/(id)")
   species: SpecyResult @rest(url: "/species")
   starship(
      id: ID
   ): Starship @rest(url: "/starships/(id)")
   starships: StarshipResult @rest(url: "/starships")
   # vehicle(s) ...
}

scalar Date
scalar Url

# Here things get interesting, see the substitution is not only possible with
# GraphQL arguments, but also with the values returned from the REST API call.
# If you are familiar with GraphQL resolvers, here `:uploader_id` is found in
# the `parent` (or `source` ) field of the resolver. This is what enables the
# nesting power of GraphQL
type Film {
   title: String
   episode_id: Int
   opening_crawl: String
   director: String
   producer: String
   release_date: Date
   character_ids: [ID!]! @from(prop: "characters")
   character_infos: [Person!]! @rest(url: "/people/{[characters]}")
   planet_ids: [ID!]! @from(prop: "planets")
   planet_infos: [Planet!]! @rest(url: "/planets/{[planets]}")
   starship_ids: [ID!]! @from(prop: "starships")
   starship_infos: [Starship!]! @rest(url: "/starships/{[starships]}")
   vehicle_ids: [ID!]! @from(prop: "vehicles")
   vehicle_infos: [Vehicle!]! @rest(url: "/vehicles/{[vehicles]}")
   specie_ids: [ID!]! @from(prop: "species")
   specie_infos: [Specy!]! @rest(url: "/species/{[species]}")
   created: Date
   edited: Date
   url: ID
}

type FilmResult {
   count: Int!
   next: Url
   previous: Url
   results: [Film!]!
}


type Person {
   name: String
   height: String
   mass: String
   hair_color: String
   skin_color: String
   eye_color: String
   birth_year: String
   gender: String
   homeworld: String
   film_ids: [ID!]! @from(prop: "films")
   film_infos: [Film!]! @rest(url: "{[films]}", prefix: false)
   specie_ids: [ID!]! @from(prop: "species")
   specie_infos: [Specy!]! @rest(url: "{[species]}", prefix: false)
   vehicle_ids: [ID!]! @from(prop: "vehicles")
   vehicle_infos: [Vehicle!]! @rest(url: "{[vehicles]}", prefix: false)
   starship_ids: [ID!]! @from(prop: "starships")
   starship_infos: [Starship!]! @rest(url: "{[starships]}", prefix: false)
   created: Date
   edited: Date
   url: ID
}

type PersonResult {
   count: Int!
   next: Url
   previous: Url
   results: [Person!]!
}

type Planet {
   name: String
   rotation_period: String
   orbital_period: String
   diameter: String
   climate: String
   gravity: String
   terrain: String
   surface_water: String
   population: String
   resident_ids: [ID!]! @from(prop: "residents")
   resident_infos: [Person!]! @rest(url: "{[residents]}")
   film_ids: [ID!]! @from(prop: "films")
   film_infos: [Film!]! @rest(url: "{[films]}")
   created: Date
   edited: Date
   url: ID
}

type PlanetResult {
   count: Int!
   next: Url
   previous: Url
   results: [Planet!]!
}

type Specy {
   name: String
   classification: String
   designation: String
   average_height: String
   skin_colors: String
   hair_colors: String
   eye_colors: String
   average_lifespan: String
   homeworld: String
   language: String
   person_ids: [ID!]! @from(prop: "people")
   person_infos: [Person!]! @rest(url: "{[people]}")
   film_ids: [ID!]! @from(prop: "films")
   film_infos: [Film!]! @rest(url: "{[films]}")
   created: Date
   edited: Date
   url: ID
}

type StarshipResult {
   count: Int!
   next: Url
   previous: Url
   results: [Starship!]!
}

type Starship {
   name: String
   model: String
   manufacturer: String
   cost_in_credits: String
   length: String
   max_atmosphering_speed: String
   crew: String
   passengers: String
   cargo_capacity: String
   consumables: String
   hyperdrive_rating: String
   MGLT: String
   starship_class: String
   pilot_ids: [ID!]! @from(prop: "pilots")
   pilot_infos: [Person!]! @rest(url: "{[pilots]}")
   film_ids: [ID!]! @from(prop: "films")
   film_infos: [Film!]! @rest(url: "{[films]}")
   created: Date
   edited: Date
   url: ID
}

type StarshipResult {
   count: Int!
   next: Url
   previous: Url
   results: [Starship!]!
}

type Vehicle {
   name: String
   model: String
   manufacturer: String
   cost_in_credits: String
   length: String
   max_atmosphering_speed: String
   crew: String
   passengers: String
   cargo_capacity: String
   consumables: String
   vehicle_class: String
   pilot_ids: [ID!]! @from(prop: "pilots")
   pilot_infos: [Person!]! @rest(url: "{[pilots]}")
   film_ids: [ID!]! @from(prop: "films")
   film_infos: [Film!]! @rest(url: "{[films]}")
   created: Date
   edited: Date
   url: ID
}

type VehicleResult {
   count: Int!
   next: Url
   previous: Url
   results: [Vehicle!]!
}

# Some Regex used to turn JSON response into GraphQL:
# /^   (\w+)s: \[(\n *".*",?\n? *)*\],?/
# "   $1_ids: [ID!]! @from(prop: "$1s")\n   $1_infos: $1Result @rest(url: "{[$1s]}")"
